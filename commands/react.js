const emojiTree = require('emoji-tree');

exports.run = async (client, message, args, level) => { // eslint-disable-line no-unused-vars
  	if (!args || args.length < 1) return message.channel.send("\nSorry, you didn't provide enough arguments.\nTry this: !react [text]");
	var reactionAdd = args.join("");
	var splitArray = reactionAdd.split("");
  message.channel.fetchMessages({limit: 2}).then(messages => {
	  var lastID = messages.keyArray();
	  message.channel.fetchMessage(lastID[1]).then(async function (messagea) {
		  message.delete();
		  var parseArray = emojiTree(reactionAdd);
		  var emojiCount = 0;
		  for (var i = 0; i < parseArray.length; i++)
		  {
			if (parseArray[i]["text"].match(/[a-z]/i))
			{				
				var checkLetters = splitArray.slice(0,i + emojiCount);
				if (checkLetters.includes(parseArray[i]["text"]) === false)
				{
					await messagea.react(getUnicodeChar(parseArray[i]["text"]));
				}
			}
			else if (parseArray[i]["type"] === 'emoji')
			{
				await messagea.react(parseArray[i]["text"]);
				emojiCount++;
			}
		  }
	  });
	  });
};

function getUnicodeChar(getCharOf)
{
	const unicodeChars = {
		'a': 'ðŸ‡¦',
		'b': 'ðŸ‡§',
		'c': 'ðŸ‡¨',
		'd': 'ðŸ‡©',
		'e': 'ðŸ‡ª',
		'f': 'ðŸ‡«',
		'g': 'ðŸ‡¬',
		'h': 'ðŸ‡­',
		'i': 'ðŸ‡®',
		'j': 'ðŸ‡¯',
		'k': 'ðŸ‡°',
		'l': 'ðŸ‡±',
		'm': 'ðŸ‡²',
		'n': 'ðŸ‡³',
		'o': 'ðŸ‡´',
		'p': 'ðŸ‡µ',
		'q': 'ðŸ‡¶',
		'r': 'ðŸ‡·',
		's': 'ðŸ‡¸',
		't': 'ðŸ‡¹',
		'u': 'ðŸ‡º',
		'v': 'ðŸ‡»',
		'w': 'ðŸ‡¼',
		'x': 'ðŸ‡½',
		'y': 'ðŸ‡¾',
		'z': 'ðŸ‡¿'
	};
	return unicodeChars[getCharOf];
}

exports.conf = {
  enabled: true,
  guildOnly: true,
  aliases: [],
  permLevel: "User"
};

exports.help = {
  name: "react",
  category: "Miscelaneous",
  description: "reacts to the previous message with a string",
  usage: "react [string]"
};